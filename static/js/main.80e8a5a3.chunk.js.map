{"version":3,"sources":["pathfindingVisualizer/node/node.jsx","algorithms/dijkstra.js","pathfindingVisualizer/pathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","state","isStart","isFinish","this","props","row","col","nodeType","getNodeType","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodes","distance","unvisitedNodes","nodes","node","push","getAllNodes","console","group","length","sortNodesByDist","closestNode","shift","isWall","Infinity","isVisited","updateUnvisitedNeighbors","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","sort","nodeA","nodeB","createNode","previousMode","PathfindingVisualizer","curRow","initGrid","setState","log","shortestPath","currentNode","unshift","getShortestPath","animateDijkstra","i","setTimeout","animateShortestPath","document","getElementById","map","rowIdx","key","nodeIdx","onClick","visualizeDijkstra","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.80e8a5a3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./node.css\";\r\n\r\nclass Node extends Component {\r\n  state = {};\r\n\r\n  getNodeType(isStart, isFinish) {\r\n    if (isStart) return \"node-start\";\r\n    else if (isFinish) return \"node-finish\";\r\n    return \"\";\r\n  }\r\n\r\n  render() {\r\n    const { row, col, isStart, isFinish } = this.props;\r\n    const nodeType = this.getNodeType(isStart, isFinish);\r\n    return <div id={`node-${row}-${col}`} className={`node ${nodeType}`}></div>;\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodes = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  console.group(unvisitedNodes);\r\n\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDist(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode.distance === Infinity) return visitedNodes;\r\n    closestNode.isVisited = true;\r\n    visitedNodes.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodes;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { row, col } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction sortNodesByDist(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nexport function getShortestPath(finishNode) {\r\n  const shortestPath = [];\r\n  let currentNode = finishNode;\r\n\r\n  while (currentNode.distance !== 0) {\r\n    shortestPath.unshift(currentNode);\r\n\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  console.log(shortestPath);\r\n  return shortestPath;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./node/node.jsx\";\r\n\r\nimport \"./pathfindingVisualizer.css\";\r\nimport { dijkstra, getShortestPath } from \"../algorithms/dijkstra\";\r\n\r\nconst WIDTH = 50;\r\nconst HEIGHT = 20;\r\nconst START_ROW = 1;\r\nconst FINISH_ROW = 10;\r\nconst START_COL = 1;\r\nconst FINISH_COL = 45;\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_ROW && col === START_COL,\r\n    isFinish: row === FINISH_ROW && col === FINISH_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousMode: null\r\n  };\r\n};\r\n\r\nconst initGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < HEIGHT; row++) {\r\n    const curRow = [];\r\n    for (let col = 0; col < WIDTH; col++) {\r\n      curRow.push(createNode(col, row));\r\n    }\r\n    grid.push(curRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nclass PathfindingVisualizer extends Component {\r\n  state = {\r\n    grid: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    const grid = initGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_ROW][START_COL];\r\n    const finishNode = grid[FINISH_ROW][FINISH_COL];\r\n    const visitedNodes = dijkstra(grid, startNode, finishNode);\r\n    console.log(finishNode);\r\n    const shortestPath = getShortestPath(finishNode);\r\n    this.animateDijkstra(visitedNodes, shortestPath);\r\n  }\r\n\r\n  animateDijkstra(visitedNodes, shortestPath) {\r\n    for (let i = 1; i < visitedNodes.length - 1; i++) {\r\n      if (i === visitedNodes.length - 2) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(shortestPath);\r\n        }, 5 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodes[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, 5 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(shortestPath) {\r\n    for (let i = 0; i < shortestPath.length - 1; i++) {\r\n      setTimeout(() => {\r\n        const node = shortestPath[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    console.log(grid);\r\n    return (\r\n      <div>\r\n        <div className=\"container\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx} className=\"row\">\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isStart, isFinish } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      row={row}\r\n                      col={col}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div>\r\n          <button\r\n            className=\"btn btn-primary\"\r\n            onClick={() => this.visualizeDijkstra()}\r\n          >\r\n            Dijkstra\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PathfindingVisualizer;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Bootstrap from \"bootstrap/dist/css/bootstrap.css\";\n\nimport PathfindingVisualizer from \"./pathfindingVisualizer/pathfindingVisualizer.jsx\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
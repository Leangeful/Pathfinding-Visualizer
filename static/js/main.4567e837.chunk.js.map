{"version":3,"sources":["pathfindingVisualizer/node/node.jsx","pathfindingVisualizer/pathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","state","isStart","isFinish","this","props","nodeType","getNodeType","className","Component","PathfindingVisualizer","nodes","row","curRow","col","curNode","push","setState","console","log","map","rowIdx","key","node","nodeIdx","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uUAoBeA,G,iNAfbC,MAAQ,G,2EAEIC,EAASC,GACnB,OAAID,EAAgB,aACXC,EAAiB,cACnB,K,+BAGC,IAAD,EACuBC,KAAKC,MAA3BH,EADD,EACCA,QAASC,EADV,EACUA,SACXG,EAAWF,KAAKG,YAAYL,EAASC,GAC3C,OAAO,yBAAKK,UAAS,eAAUF,S,GAZhBG,cCoDJC,G,iNA/CbT,MAAQ,CACNU,MAAO,I,mFAKP,IADA,IAAMA,EAAQ,GACLC,EAAM,EAAGA,EATP,GASqBA,IAAO,CAErC,IADA,IAAMC,EAAS,GACNC,EAAM,EAAGA,EAZV,GAYuBA,IAAO,CACpC,IAAMC,EAAU,CACdD,MACAF,MACAV,QAAiB,KAARU,GAAsB,IAARE,EACvBX,SAAkB,KAARS,GAAsB,KAARE,GAE1BD,EAAOG,KAAKD,GAEdJ,EAAMK,KAAKH,GAEbT,KAAKa,SAAS,CAAEN,Y,+BAER,IACAA,EAAUP,KAAKH,MAAfU,MAER,OADAO,QAAQC,IAAIR,GAEV,yBAAKH,UAAU,QACZG,EAAMS,KAAI,SAACR,EAAKS,GACf,OACE,yBAAKC,IAAKD,EAAQb,UAAU,OACzBI,EAAIQ,KAAI,SAACG,EAAMC,GAAa,IACnBtB,EAAsBqB,EAAtBrB,QAASC,EAAaoB,EAAbpB,SACjB,OACE,kBAAC,EAAD,CACEmB,IAAKE,EACLtB,QAASA,EACTC,SAAUA,gB,GApCMM,cCKrBgB,MARf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,QCIckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.4567e837.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./node.css\";\r\n\r\nclass Node extends Component {\r\n  state = {};\r\n\r\n  getNodeType(isStart, isFinish) {\r\n    if (isStart) return \"node-start\";\r\n    else if (isFinish) return \"node-finish\";\r\n    return \"\";\r\n  }\r\n\r\n  render() {\r\n    const { isStart, isFinish } = this.props;\r\n    const nodeType = this.getNodeType(isStart, isFinish);\r\n    return <div className={`node ${nodeType}`}></div>;\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./node/node.jsx\";\r\n\r\nimport \"./pathfindingVisualizer.css\";\r\n\r\nconst WIDTH = 50;\r\nconst HEIGHT = 20;\r\n\r\nclass PathfindingVisualizer extends Component {\r\n  state = {\r\n    nodes: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    const nodes = [];\r\n    for (let row = 0; row < HEIGHT; row++) {\r\n      const curRow = [];\r\n      for (let col = 0; col < WIDTH; col++) {\r\n        const curNode = {\r\n          col,\r\n          row,\r\n          isStart: row === 10 && col === 5,\r\n          isFinish: row === 10 && col === 45\r\n        };\r\n        curRow.push(curNode);\r\n      }\r\n      nodes.push(curRow);\r\n    }\r\n    this.setState({ nodes });\r\n  }\r\n  render() {\r\n    const { nodes } = this.state;\r\n    console.log(nodes);\r\n    return (\r\n      <div className=\"grid\">\r\n        {nodes.map((row, rowIdx) => {\r\n          return (\r\n            <div key={rowIdx} className=\"row\">\r\n              {row.map((node, nodeIdx) => {\r\n                const { isStart, isFinish } = node;\r\n                return (\r\n                  <Node\r\n                    key={nodeIdx}\r\n                    isStart={isStart}\r\n                    isFinish={isFinish}\r\n                  ></Node>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PathfindingVisualizer;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport PathfindingVisualizer from \"./pathfindingVisualizer/pathfindingVisualizer.jsx\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}